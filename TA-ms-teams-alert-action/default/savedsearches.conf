[MS Teams - modular action logs]
description = This report exposes all logs from the MS Teams modular action
dispatch.earliest_time = -60m
dispatch.latest_time = now
display.visualizations.show = 0
request.ui_dispatch_app = TA-ms-teams-alert-action
request.ui_dispatch_view = search
search = (index="_internal" OR index="cim_modactions") (source="*ms_teams_publish_to_channel_modalert.log")

[MS Teams - modular resilient store action logs]
description = This report exposes all logs from the MS Teams modular action
dispatch.earliest_time = -60m
dispatch.latest_time = now
display.visualizations.show = 0
request.ui_dispatch_app = TA-ms-teams-alert-action
request.ui_dispatch_view = search
search = (index="_internal" OR index="cim_modactions") (source="*ms_teams_publish_to_channel_replay_modalert.log")

[MS Teams - modular action failures]
description = This report exposes all logs from the MS Teams modular action
dispatch.earliest_time = -60m
dispatch.latest_time = now
display.visualizations.show = 0
request.ui_dispatch_app = TA-ms-teams-alert-action
request.ui_dispatch_view = search
search = (index="_internal" OR index="cim_modactions") (source="*ms_teams_publish_to_channel_modalert.log") action_status=failure

[MS Teams - Messages publication successes]
description = This report exposes all logs from the MS Teams modular action
dispatch.earliest_time = -60m
dispatch.latest_time = now
display.visualizations.show = 0
request.ui_dispatch_app = TA-ms-teams-alert-action
request.ui_dispatch_view = search
search = (index="_internal" OR index="cim_modactions") (source="*ms_teams_publish_to_channel_modalert.log") "Microsoft Teams message successfully created"

[MS Teams - Messages publication failures]
description = This report exposes all logs from the MS Teams modular action
dispatch.earliest_time = -60m
dispatch.latest_time = now
display.visualizations.show = 0
request.ui_dispatch_app = TA-ms-teams-alert-action
request.ui_dispatch_view = search
search = (index="_internal" OR index="cim_modactions") (source="*ms_teams_publish_to_channel_modalert.log") "Microsoft Teams message creation has failed"

[MS Teams - detection of temporary messages publication failure]
alert.severity = 4
alert.suppress = 1
alert.suppress.fields = sid
alert.suppress.period = 5m
alert.track = 1
counttype = number of events
cron_schedule = */5 * * * *
description = This alert performs detection of MS Teams publication failures
disabled = 0
dispatch.earliest_time = -15m
dispatch.latest_time = -30s
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.show = 0
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = TA-ms-teams-alert-action
request.ui_dispatch_view = search
search = (index="_internal" OR index="cim_modactions") (source="*ms_teams_publish_to_channel_modalert.log")\
| transaction pid maxpause=5m\
| where NOT match(_raw, "Microsoft Teams publish to channel was successful")\
| stats first(app) as app, first(action_mode) as action_mode, values(sid) as sid, first(search_name) as search_name, first(user) as user by _time

[MS Teams - detection of permanent messages publication failure]
alert.severity = 4
alert.suppress = 1
alert.suppress.fields = time
alert.suppress.period = 1h
alert.track = 1
alert.digest_mode = 0
counttype = number of events
cron_schedule = */5 * * * *
description = This alert will detect a definitive and permanent failure of a channel message creation.\
once a message has reached the final state of the resilient policy, it is temporary stored upon definitive deletion but creation will not be attempted anymore.
disabled = 0
dispatch.earliest_time = -15m
dispatch.latest_time = -30s
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.show = 0
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = TA-ms-teams-alert-action
request.ui_dispatch_view = search
search = (index="_internal" OR index="cim_modactions") (source="*ms_teams_publish_to_channel_replay_modalert.log") "permanent failure!"\
| stats first(app) as app, first(action_mode) as action_mode, values(sid) as sid, first(search_name) as search_name, first(user) as user by _time\
| eval time=strftime(_time, "%c")

[MS Teams - Resilient store Tracker]
action.ms_teams_publish_to_channel_replay = 1
action.ms_teams_publish_to_channel_replay.param.message_url = $result.url$
action.ms_teams_publish_to_channel_replay.param.message_ctime = $result.ctime$
action.ms_teams_publish_to_channel_replay.param.message_data = $result.data$
action.ms_teams_publish_to_channel_replay.param.message_max_attempts = $result.max_attempts$
action.ms_teams_publish_to_channel_replay.param.message_mtime = $result.mtime$
action.ms_teams_publish_to_channel_replay.param.message_no_attempts = $result.no_attempts$
action.ms_teams_publish_to_channel_replay.param.message_status = $result.status$
action.ms_teams_publish_to_channel_replay.param.message_uuid = $result.uuid$
alert.digest_mode = 0
alert.suppress = 0
alert.track = 0
counttype = number of events
description = This alert tracks failed messages stored in the resilient KVstore and manage message creation re-attempts
cron_schedule = */5 * * * *
dispatch.earliest_time = -15m
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = TA-ms-teams-alert-action
request.ui_dispatch_view = search
search = | inputlookup ms_teams_failures_replay | eval uuid=_key\
| table uuid, url, data, no_attempts, status, ctime, mtime\
`comment("#### KVstore containing Microsoft Teams messages failure is loaded")`\
\
`comment("#### mtime contains the last modification epoch time of the ticket, it will be null if this is the first time we handle this failure")`\
| fillnull value="n/a" mtime\
\
`comment("#### defines the maximal numbers of attempts, the bellow expects the job to run every 5 minutes, and allows attempting the ticket creation during 72 hours")`\
`comment("#### once the 72 hour period is reached, the ticket is finally purged from the KVstore")`\
| eval max_attempts=(60/5)*24*3\
| eval duration=mtime-ctime\
| eval expiration=mtime+(86400*7)\
| eval status=if(mtime!="n/a" AND now()>expiration, "tagged_for_removal", status)\
\
`comment("#### convert duration to human readable")`\
| eval duration=if(mtime!="n/a", tostring(mtime-ctime, "duration"), "n/a")
